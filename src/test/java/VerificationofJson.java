
//Second video
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import static io.restassured.RestAssured.*;

import org.json.simple.JSONObject;
import org.json.simple.JSONObject.*;

import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.internal.path.json.mapping.JsonObjectDeserializer;
import io.restassured.response.Response;
import io.restassured.response.ResponseBody;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import static org.testng.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

//Note: we are running the test for reqres.in. Endpoints are present on this site.

//note: we can import this thing to if we want this line //Response response = RestAssured.get("https://reqres.in/api/users?page=2");
//import io.restassured.RestAssured.*;
public class VerificationofJson {
	String POST_URL = "https://reqres.in/api/users";
	String PUT_URL_PatchURL = "https://reqres.in/api/users/2";

	String URL = "http://ergast.com/api/f1/2017/circuits.json";

	@Test
	public void getStatusCode() {

		int statuscodeofAPI = given().when().get(URL).getStatusCode();
		System.out.println(statuscodeofAPI);
		// Soft assert
		SoftAssert sat = new SoftAssert();
		sat.assertEquals(statuscodeofAPI, 200);
		sat.assertEquals(statuscodeofAPI, 400, "cod is not matching");// This is passing becuase its soft assert
		// Hard assert
		assertEquals(statuscodeofAPI, 400);// It will fail becuase its hard assert

	}

	@Test
	public void verifyResponseJson() {
		given().when().get(URL).then().assertThat().body("MRData.CircuitTable.Circuits.circuitId", hasSize(20)); // size
																													// of
																													// particular
																													// array
		given().when().get(URL).then().assertThat().body("MRData.CircuitTable.Circuits.circuitId",
				hasItem("albert_park"));// verify the particular value
		// given().when().get(URL).then().assertThat().body("MRData.CircuitTable.Circuits.circuitId",
		// hasItem("Gourav"));
		// given().when().get(URL).then().assertThat().body("MRData.CircuitTable.Circuits",
		// hasKey("url"));



	}

	@Test
	public void verifyHeader() {

		// This will print the entire response
		ValidatableResponse response = given().when().get("http://ergast.com/api/f1/2017/circuits.json").then().log()
				.all();
		System.out.println("This is the response" + response.log().all());

		// The Content-Length entity-header field indicates the size of the entity-body
		// When we will hit the api, we will get the header info abobe to the content body
		given().when().get("http://ergast.com/api/f1/2017/circuits.json").then().assertThat().statusCode(200).and()
				.contentType(ContentType.JSON).and().header("Content-Length", equalTo("4552"));

		// Hashing is a fundamental concept of computer science
		// Simply put, hashCode() returns an integer value, generated by a hashing algorithm.//
		int xx = given().when().get("http://ergast.com/api/f1/2017/circuits.json").then().assertThat().statusCode(200)
				.and().hashCode();
		System.out.println("has code" + xx);
		
		//just verify the content type
		given().when().get("http://ergast.com/api/f1/2017/circuits.json").then().assertThat().contentType(ContentType.JSON);
		
	
		

	}
	//@Test
	public void test_Md5CheckSumForTest_ShouldBe098f6bcd4621d373cade4e832627b4f6() {
	    
	    String originalText = "test";
	    String expectedMd5CheckSum = "098f6bcd4621d373cade4e832627b4f6";
	   
	    //query parameter
		/*
		 * What is query parameter:Query parameters: These are appended at the end of a
		 * RESTful API endpoint and can be identified by the question mark in front of
		 * them. For example, in the endpoint http://md5.jsontest.com/?text=test, "text"
		 * is a query parameter (with value "test").
		 */	    given().
	        param("text",originalText).
	    when().
	        get("http://md5.jsontest.com").
	    then().
	        assertThat().
	        body("md5",equalTo(expectedMd5CheckSum));
	}
	
	//@Test
	public void test_NumberOfCircuits_ShouldBe20_Parameterized() {
	        
	    String season = "2017";
	    int numberOfRaces = 20;
	  
	    //Path Parameter
		/*
		 * //What is path parameter-These are part of the RESTful API endpoint. For
		 * example
		 */	    given().
	        pathParam("raceSeason",season).//query parameter
	    when().
	        get("http://ergast.com/api/f1/{raceSeason}/circuits.json").
	    then().
	        assertThat().
	        body("MRData.CircuitTable.Circuits.circuitId",hasSize(numberOfRaces));
	}
	////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////
	////////////////////////////////////////////////////////
	//Accessing secured APIs////////////////////////////////
	
	@Test
	public void test_APIWithBasicAuthentication_ShouldBeGivenAccess() {
	        
	    given().
	        auth().
	        preemptive().
	        basic("username", "password").
	    when().
	        get("http://path.to/basic/secured/api").
	    then().
	        assertThat().
	        statusCode(200);
	    
	    
	}@Test
	public void test_APIWithOAuth2Authentication_ShouldBeGivenAccess() {
        
	    given().
	        auth().
	        oauth2("xx").
	    when().
	        get("http://path.to/oath2/secured/api").
	    then().
	        assertThat().
	        statusCode(200);
	}
////////////////////////////////////////////////////////
///////////////////////////////////////////////////////
////////////////////////////////////////////////////////
//Extracting the value from key and passing as parameter////////////////////////////////
	
	@Test
	public void test_ScenarioRetrieveFirstCircuitFor2017SeasonAndGetCountry_ShouldBeAustralia() {
	        
	    // First, retrieve the circuit ID for the first circuit of the 2017 season
	    String circuitId = given().
	    when().
	        get("http://ergast.com/api/f1/2017/circuits.json").
	    then().
	        extract().
	        path("MRData.CircuitTable.Circuits.circuitId[0]");
	        
	    // Then, retrieve the information known for that circuit and verify it is located in Australia
	    given().
	        pathParam("circuitId",circuitId).
	    when().
	        get("http://ergast.com/api/f1/circuits/{circuitId}.json").
	    then().
	        assertThat().
	        body("MRData.CircuitTable.Circuits.Location[0].country",equalTo("Australia"));
	}
	
	
////////////////////////////////////////////////////////
///////////////////////////////////////////////////////
////////////////////////////////////////////////////////
//what is response specification////////////////////////////////
	
	ResponseSpecification checkStatusCodeAndContentType = 
		    new ResponseSpecBuilder().
		        expectStatusCode(200).
		        expectContentType(ContentType.JSON).
		        build();

	@Test
	public void test_NumberOfCircuits_ShouldBe20_UsingResponseSpec() {
		
		 ValidatableResponse xxxx= given().
		    	    when().
			        get("http://ergast.com/api/f1/2017/circuits.json").then().body("MRData.CircuitTable.season", hasItem(2017));
		
		    System.out.println(xxxx);
	     int expectedSeasonValue=2017;   
	    given().
	    when().
	        get("http://ergast.com/api/f1/2017/circuits.json").
	    then().
	        assertThat().
	        spec(checkStatusCodeAndContentType).
	    and().
	        body("MRData.CircuitTable.Circuits.circuitId",hasSize(20)).and().body("MRData.series",equalTo("f1")).and().
	        body("MRData.CircuitTable.season", hasItem(expectedSeasonValue));
	    
	   
	}
	
}